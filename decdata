#!/usr/bin/env python3
"""
DecData - Decentralized Video Data Exchange

Command-line interface for the DecData node.
"""

import os
import sys
import argparse
import importlib.util

# Check if the decdata module is installed
spec = importlib.util.find_spec("decdata")
if spec is None:
    # If not installed, add the current directory to the path
    sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from decdata.decdata_node import DecDataNode

def main():
    """
    Main entry point for the DecData CLI.
    """
    parser = argparse.ArgumentParser(description='DecData - Decentralized Video Data Exchange')
    subparsers = parser.add_subparsers(dest='command', help='Command to execute')

    # Serve command
    serve_parser = subparsers.add_parser('serve', help='Start a DecData node')
    serve_parser.add_argument('--host', type=str, default='0.0.0.0', help='Host to bind to')
    serve_parser.add_argument('--port', type=int, default=2122, help='Port to bind to')
    serve_parser.add_argument('--nosvid-api-url', type=str, default='http://localhost:2121/api', help='URL of the NosVid API')
    serve_parser.add_argument('--sync-interval', type=int, default=300, help='Interval in seconds for syncing with NosVid API')
    serve_parser.add_argument('--max-connections', type=int, default=0, help='Maximum number of connections (0 for unlimited)')

    # Connect command
    connect_parser = subparsers.add_parser('connect', help='Connect to another node')
    connect_parser.add_argument('--host', type=str, required=True, help='Host to connect to')
    connect_parser.add_argument('--port', type=int, required=True, help='Port to connect to')
    connect_parser.add_argument('--local-port', type=int, default=0, help='Local port to bind to (0 for auto-assign)')
    connect_parser.add_argument('--nosvid-api-url', type=str, default='http://localhost:2121/api', help='URL of the NosVid API')

    # Search command
    search_parser = subparsers.add_parser('search', help='Search for videos')
    search_parser.add_argument('query', type=str, nargs='?', help='Search query')
    search_parser.add_argument('--id', type=str, help='Video ID to search for')

    # Download command
    download_parser = subparsers.add_parser('download', help='Download a video')
    download_parser.add_argument('video_id', type=str, help='ID of the video to download')
    download_parser.add_argument('--node', type=str, help='ID of the node to download from')
    download_parser.add_argument('--output', type=str, help='Output directory')

    # Interactive command
    interactive_parser = subparsers.add_parser('interactive', help='Start interactive mode')
    interactive_parser.add_argument('--local-port', type=int, default=0, help='Local port to bind to (0 for auto-assign)')
    interactive_parser.add_argument('--nosvid-api-url', type=str, default='http://localhost:2121/api', help='URL of the NosVid API')

    args = parser.parse_args()

    if args.command == 'serve':
        serve_node(args)
    elif args.command == 'connect':
        connect_to_node(args)
    elif args.command == 'interactive':
        interactive_mode(args)
    elif args.command == 'search':
        search_videos(args)
    elif args.command == 'download':
        download_video(args)
    else:
        parser.print_help()
        sys.exit(1)

def serve_node(args):
    """
    Serve a DecData node.
    """
    import time

    # Create and start the node
    node = DecDataNode(
        host=args.host,
        port=args.port,
        nosvid_api_url=args.nosvid_api_url,
        max_connections=args.max_connections,
        sync_interval=args.sync_interval
    )

    node.start()

    print(f"DecData node serving on {args.host}:{args.port}")
    print("Press Ctrl+C to stop the node")

    try:
        # Keep the node running
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        print("Stopping node...")
        node.stop()
        node.join()
        print("Node stopped")

def connect_to_node(args):
    """
    Connect to another node.
    """
    import time

    # Create and start the node
    node = DecDataNode(
        host='0.0.0.0',
        port=args.local_port,
        nosvid_api_url=args.nosvid_api_url
    )

    node.start()

    print(f"DecData node started on port {node.port}")

    # Connect to the remote node
    print(f"Connecting to {args.host}:{args.port}...")
    if node.connect_with_node(args.host, args.port):
        print(f"Connected to {args.host}:{args.port}")

        # Keep the connection open for a while
        try:
            print("Press Ctrl+C to disconnect")
            while True:
                time.sleep(1)
        except KeyboardInterrupt:
            print("Disconnecting...")
    else:
        print(f"Failed to connect to {args.host}:{args.port}")

    # Stop the node
    node.stop()
    node.join()
    print("Node stopped")

def search_videos(args):
    """
    Search for videos.
    """
    import time

    # Create a temporary node for searching
    node = DecDataNode('0.0.0.0', 0)
    node.start()

    try:
        # TODO: Connect to other nodes (would need to be configured)
        # node.connect_with_node('localhost', 8000)

        if not args.query and not args.id:
            print("Error: Either query or video ID must be provided")
            return

        search_id = node.search_videos(args.query, args.id)
        print(f"Search request sent (ID: {search_id})")
        print("Waiting for results...")

        # Wait for results (in a real application, this would be handled asynchronously)
        time.sleep(5)

        print("Search complete")
    finally:
        node.stop()
        node.join()

def download_video(args):
    """
    Download a video.
    """
    import time

    # Create a temporary node for downloading
    node = DecDataNode('0.0.0.0', 0, share_dir=args.output)
    node.start()

    try:
        # TODO: Connect to other nodes (would need to be configured)
        # node.connect_with_node('localhost', 8000)

        request_id = node.download_video(args.video_id, args.node)

        if not request_id:
            print(f"Failed to download video {args.video_id}")
            return

        print(f"Download request sent (ID: {request_id})")
        print("Waiting for download to complete...")

        # Wait for download to complete (in a real application, this would be handled asynchronously)
        while request_id in node.active_transfers:
            transfer = node.active_transfers[request_id]
            if transfer['status'] == 'completed':
                print(f"Download completed: {args.video_id}")
                break
            elif transfer['status'] == 'failed':
                print(f"Download failed: {args.video_id}")
                break

            time.sleep(1)
    finally:
        node.stop()
        node.join()

def interactive_mode(args):
    """
    Interactive mode for testing node communication.
    """
    import cmd
    import time
    import json
    import hashlib

    class DecDataShell(cmd.Cmd):
        intro = 'Welcome to DecData interactive shell. Type help or ? to list commands.\n'
        prompt = 'decdata> '

        def __init__(self, node):
            super().__init__()
            self.node = node
            self.last_search_id = None
            self.last_request_id = None

        def _get_peer(self, peer_idx):
            """Helper to get a peer by index"""
            peers = self.node.get_peers()
            if not peers:
                print("No connected peers")
                return None

            try:
                peer_idx = int(peer_idx) - 1
                if 0 <= peer_idx < len(peers):
                    return peers[peer_idx]
                else:
                    print(f"Invalid peer index. Use 1-{len(peers)}")
                    return None
            except ValueError:
                print("Peer index must be a number")
                return None

        def _print_json(self, data):
            """Helper to print JSON data nicely"""
            import json
            print(json.dumps(data, indent=2))

        def do_connect(self, arg):
            'Connect to a remote node: connect <host> <port>'
            try:
                host, port = arg.split()
                port = int(port)
                if self.node.connect_with_node(host, port):
                    print(f"Connected to {host}:{port}")
                else:
                    print(f"Failed to connect to {host}:{port}")
            except ValueError:
                print("Usage: connect <host> <port>")

        def do_peers(self, _):
            'List connected peers'
            peers = self.node.get_peers()
            if not peers:
                print("No connected peers")
            else:
                print("\nConnected peers:")
                print("-" * 40)
                for i, peer in enumerate(peers, 1):
                    print(f"{i}. {peer.host}:{peer.port} (ID: {peer.id})")
                print("-" * 40)

        def do_send(self, arg):
            'Send a simple message to all peers: send <message>'
            if not arg:
                print("Usage: send <message>")
                return

            message = {"type": "message", "content": arg}
            print("\nSending message to all peers:")
            self._print_json(message)

            self.node.send_to_nodes(json.dumps(message))
            print("Message sent to all peers")

        def do_sendto(self, arg):
            'Send a simple message to a specific peer: sendto <peer_index> <message>'
            try:
                peer_idx, message_text = arg.split(maxsplit=1)
                peer = self._get_peer(peer_idx)
                if not peer:
                    return

                message = {"type": "message", "content": message_text}
                print(f"\nSending message to peer {peer_idx}:")
                self._print_json(message)

                self.node.send_to_node(peer, json.dumps(message))
                print(f"Message sent to peer {peer_idx}")
            except ValueError:
                print("Usage: sendto <peer_index> <message>")

        def do_catalog(self, arg):
            'Request catalog from a specific peer: catalog <peer_index>'
            if not arg:
                print("Usage: catalog <peer_index>")
                return

            peer = self._get_peer(arg)
            if not peer:
                return

            # The catalog is automatically exchanged when connecting,
            # but we can request it explicitly
            message = {
                "type": "catalog",
                "node_id": self.node.id,
                "videos": list(self.node.video_catalog.keys())
            }

            print(f"\nSending catalog request to peer {arg}:")
            self._print_json(message)

            self.node.send_to_node(peer, json.dumps(message))
            print(f"Catalog request sent to peer {arg}")

        def do_search(self, arg):
            'Search for videos: search <peer_index> [--id VIDEO_ID] [--query TEXT]'
            args = arg.split()
            if not args:
                print("Usage: search <peer_index> [--id VIDEO_ID] [--query TEXT]")
                return

            peer_idx = args[0]
            peer = self._get_peer(peer_idx)
            if not peer:
                return

            # Parse arguments
            video_id = None
            query = None
            i = 1
            while i < len(args):
                if args[i] == '--id' and i+1 < len(args):
                    video_id = args[i+1]
                    i += 2
                elif args[i] == '--query' and i+1 < len(args):
                    query = args[i+1]
                    i += 2
                else:
                    i += 1

            if not video_id and not query:
                print("Error: Either --id or --query must be specified")
                return

            # Create search message
            import hashlib
            import time
            search_id = hashlib.md5(f"{time.time()}-{query}-{video_id}".encode()).hexdigest()
            self.last_search_id = search_id

            message = {
                "type": "search",
                "search_id": search_id,
                "query": query,
                "video_id": video_id
            }

            print(f"\nSending search request to peer {peer_idx}:")
            self._print_json(message)

            self.node.send_to_node(peer, json.dumps(message))
            print(f"Search request sent to peer {peer_idx} (Search ID: {search_id})")

        def do_download(self, arg):
            'Request to download a video: download <peer_index> <video_id>'
            args = arg.split()
            if len(args) != 2:
                print("Usage: download <peer_index> <video_id>")
                return

            peer_idx, video_id = args
            peer = self._get_peer(peer_idx)
            if not peer:
                return

            # Create download request
            import hashlib
            import time
            request_id = hashlib.md5(f"{time.time()}-{video_id}".encode()).hexdigest()
            self.last_request_id = request_id

            message = {
                "type": "download_request",
                "request_id": request_id,
                "video_id": video_id
            }

            print(f"\nSending download request to peer {peer_idx}:")
            self._print_json(message)

            self.node.send_to_node(peer, json.dumps(message))
            print(f"Download request sent to peer {peer_idx} (Request ID: {request_id})")

        def do_video_info(self, arg):
            'Request video information: video_info <peer_index> <video_id>'
            args = arg.split()
            if len(args) != 2:
                print("Usage: video_info <peer_index> <video_id>")
                return

            peer_idx, video_id = args
            peer = self._get_peer(peer_idx)
            if not peer:
                return

            # Create video info request
            import hashlib
            import time
            request_id = hashlib.md5(f"{time.time()}-{video_id}".encode()).hexdigest()
            self.last_request_id = request_id

            message = {
                "type": "video_info_request",
                "request_id": request_id,
                "video_id": video_id
            }

            print(f"\nSending video info request to peer {peer_idx}:")
            self._print_json(message)

            self.node.send_to_node(peer, json.dumps(message))
            print(f"Video info request sent to peer {peer_idx} (Request ID: {request_id})")

        def do_local_catalog(self, _):
            'Show the local video catalog'
            if not self.node.video_catalog:
                print("Local catalog is empty")
                return

            print("\nLocal video catalog:")
            print("-" * 60)
            for video_id, metadata in self.node.video_catalog.items():
                title = metadata.get('title', 'Unknown')
                print(f"- {video_id}: {title}")
            print("-" * 60)

        def do_peer_catalog(self, arg):
            'Show the catalog of a specific peer: peer_catalog <peer_index>'
            if not arg:
                print("Usage: peer_catalog <peer_index>")
                return

            peer = self._get_peer(arg)
            if not peer:
                return

            if peer.id not in self.node.peers_catalog:
                print(f"No catalog available for peer {arg}")
                return

            videos = self.node.peers_catalog[peer.id]
            if not videos:
                print(f"Peer {arg} has an empty catalog")
                return

            print(f"\nCatalog for peer {arg}:")
            print("-" * 60)
            for video_id in videos:
                print(f"- {video_id}")
            print("-" * 60)

        def do_exit(self, _):
            'Exit the shell'
            print("Stopping node...")
            self.node.stop()
            self.node.join()
            print("Node stopped")
            return True

        def do_EOF(self, arg):
            'Exit on Ctrl-D'
            print()  # Empty line
            return self.do_exit(arg)

    # Create and start the node
    node = DecDataNode(
        host='0.0.0.0',
        port=args.local_port,
        nosvid_api_url=args.nosvid_api_url
    )

    # Add a message handler for the interactive mode
    def message_handler(_, peer, data):
        try:
            # Handle different data types
            import json
            if isinstance(data, dict):
                message = data
            elif isinstance(data, str):
                message = json.loads(data)
            else:
                # Not a message we can handle
                return

            # Print the received message
            print(f"\nReceived message from {peer.host}:{peer.port}:")
            print("-" * 60)
            print(json.dumps(message, indent=2))
            print("-" * 60)
            print(f"{DecDataShell.prompt}", end='', flush=True)
        except Exception as e:
            print(f"\nError handling message: {e}")
            print(f"{DecDataShell.prompt}", end='', flush=True)

    node.add_message_handler(message_handler)
    node.start()

    print(f"DecData node started on port {node.port}")

    # Start the interactive shell
    shell = DecDataShell(node)
    try:
        shell.cmdloop()
    except KeyboardInterrupt:
        print("\nStopping node...")
        node.stop()
        node.join()
        print("Node stopped")

if __name__ == '__main__':
    main()
